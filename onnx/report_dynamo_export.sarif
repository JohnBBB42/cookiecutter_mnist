{
 "runs":[
  {
   "tool":{
    "driver":{
     "name":"torch.onnx.dynamo_export",
     "contents":[
      "localizedData",
      "nonLocalizedData"
     ],
     "language":"en-US",
     "rules":[
      {
       "id":"FXE0010",
       "fullDescription":{
        "text":"FX graph transformation during ONNX export before converting from FX IR to ONNX IR.",
        "markdown":"This diagnostic tracks the FX passes executed during the ONNX export process prior\nto converting from FX IR (Intermediate Representation) to ONNX IR.\n\nUnder the scope of ONNX export, an FX pass refers to a specific transformation applied to the FX GraphModule.\nThe primary aim of these passes is to streamline the graph into a format that aligns more with the ONNX IR.\nMoreover, these passes work to substitute unsupported FX IR features with those recognized and endorsed by\nONNX IR. Common transformations include, but aren't limited to, decomposition, functionalization and\ntype promotion.\n\nFor those who are interested in a comprehensive log detailing the modifications made during these passes,\nthere are a couple of options:\n\n- Set DiagnosticOptions.verbosity_level to logging.DEBUG.\n- Activate the environment variable TORCH_LOGS='onnx_diagnostics'.\n\nHowever, it's noteworthy that by default, such detailed logging is turned off. The primary reason being\nits considerable impact on performance.\n\nFor an in-depth understanding of each specific pass, please refer to the directory: torch/onnx/_internal/fx/passes.\n"
       },
       "name":"fx-pass",
       "shortDescription":{
        "text":"FX graph transformation during ONNX export before converting from FX IR to ONNX IR."
       }
      }
     ],
     "version":"2.5.1+cu124"
    }
   },
   "language":"en-US",
   "newlineSequences":[
    "\r\n",
    "\n"
   ],
   "results":[
    {
     "message":{
      "markdown":"Running Decompose pass. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature Transform.run\n- self: <class 'torch.onnx._internal.fx.passes.decomp.Decompose'>\n- args: Tuple[length=1](\nTensor(f32[1, 3, 224, 224]),\n)\nFor detailed logging of graph modifications by this pass, either set `DiagnosticOptions.verbosity_level` to `logging.DEBUG` or use the environment variable `TORCH_LOGS='onnx_diagnostics'`.\n## Exception log\n```\nTraceback (most recent call last):\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/onnx/_internal/diagnostics/infra/decorator.py\", line 130, in wrapper\n    return_values = fn(*args, **kwargs)\n                    ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/onnx/_internal/fx/_pass.py\", line 275, in run\n    module = self._run(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/decomp.py\", line 70, in _run\n    decomposed_module = proxy_tensor.make_fx(\n                        ^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/fx/experimental/proxy_tensor.py\", line 2110, in wrapped\n    return make_fx_tracer.trace(f, *args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/fx/experimental/proxy_tensor.py\", line 2048, in trace\n    return self._trace_inner(f, *args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/fx/experimental/proxy_tensor.py\", line 2034, in _trace_inner\n    t = dispatch_trace(\n        ^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/_compile.py\", line 32, in inner\n    return disable_fn(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/_dynamo/eval_frame.py\", line 632, in _fn\n    return fn(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/fx/experimental/proxy_tensor.py\", line 1127, in dispatch_trace\n    graph = tracer.trace(root, concrete_args)  # type: ignore[arg-type]\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/_dynamo/eval_frame.py\", line 632, in _fn\n    return fn(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/fx/_symbolic_trace.py\", line 823, in trace\n    (self.create_arg(fn(*args)),),\n                     ^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/fx/experimental/proxy_tensor.py\", line 1182, in wrapped\n    out = f(*tensors)\n          ^^^^^^^^^^^\n\n  File \"<string>\", line 1, in <lambda>\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/onnx/_internal/fx/passes/_utils.py\", line 28, in wrapped\n    return torch.fx.Interpreter(graph_module).run(*args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/fx/interpreter.py\", line 146, in run\n    self.env[node] = self.run_node(node)\n                     ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/fx/interpreter.py\", line 203, in run_node\n    return getattr(self, n.op)(n.target, args, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/fx/interpreter.py\", line 320, in call_module\n    return submod(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/fx/_symbolic_trace.py\", line 801, in module_call_wrapper\n    return self.call_module(mod, forward, args, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/fx/experimental/proxy_tensor.py\", line 1039, in call_module\n    return forward(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/fx/_symbolic_trace.py\", line 794, in forward\n    return _orig_module_call(mod, *args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/nn/modules/module.py\", line 1736, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/nn/modules/module.py\", line 1747, in _call_impl\n    return forward_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/nn/modules/conv.py\", line 554, in forward\n    return self._conv_forward(input, self.weight, self.bias)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/nn/modules/conv.py\", line 549, in _conv_forward\n    return F.conv2d(\n           ^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/fx/experimental/proxy_tensor.py\", line 1230, in __torch_function__\n    return func(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/utils/_stats.py\", line 21, in wrapper\n    return fn(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/fx/experimental/proxy_tensor.py\", line 1308, in __torch_dispatch__\n    return proxy_call(self, func, self.pre_dispatch, args, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/fx/experimental/proxy_tensor.py\", line 906, in proxy_call\n    out = func(*args, **kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/_ops.py\", line 716, in __call__\n    return self._op(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/utils/_stats.py\", line 21, in wrapper\n    return fn(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/_subclasses/fake_tensor.py\", line 1238, in __torch_dispatch__\n    return self.dispatch(func, types, args, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/_subclasses/fake_tensor.py\", line 1692, in dispatch\n    return self._cached_dispatch_impl(func, types, args, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/_subclasses/fake_tensor.py\", line 1348, in _cached_dispatch_impl\n    output = self._dispatch_impl(func, types, args, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/_subclasses/fake_tensor.py\", line 1983, in _dispatch_impl\n    op_impl_out = op_impl(self, func, *args, **kwargs)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/_subclasses/fake_impls.py\", line 147, in dispatch_to_op_implementations_dict\n    return op_implementations_dict[func](fake_mode, func, *args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/_subclasses/fake_impls.py\", line 709, in conv\n    out = func(**kwargs)\n          ^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/_ops.py\", line 716, in __call__\n    return self._op(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/_meta_registrations.py\", line 2254, in meta_conv\n    shape_out = calc_conv_nd_return_shape(\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/_meta_registrations.py\", line 2171, in calc_conv_nd_return_shape\n    kernel_size = weight.shape[2:]\n                  ^^^^^^^^^^^^\n\nAttributeError: 'NoneType' object has no attribute 'shape'\n\nWhile executing %out : [num_users=1] = call_module[target=getattr_L__self___layer1___0___conv1](args = (%x_3,), kwargs = {})\nOriginal traceback:\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torchvision/models/resnet.py\", line 285, in forward\n    return self._forward_impl(x)\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torchvision/models/resnet.py\", line 273, in _forward_impl\n    x = self.layer1(x)\n  File \"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torchvision/models/resnet.py\", line 92, in forward\n    out = self.conv1(x)\n\n\n```",
      "text":"Running Decompose pass. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"error",
     "locations":[
      {
       "message":{
        "text":"Transform.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/home/amazonas/miniconda3/envs/mlops_env80/lib/python3.12/site-packages/torch/onnx/_internal/fx/_pass.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":240
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0010",
     "stacks":[]
    }
   ]
  }
 ],
 "version":"2.1.0",
 "schemaUri":"https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/schemas/sarif-schema-2.1.0.json"
}